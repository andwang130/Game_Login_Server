// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: to_Fight.proto

#ifndef PROTOBUF_INCLUDED_to_5fFight_2eproto
#define PROTOBUF_INCLUDED_to_5fFight_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_to_5fFight_2eproto 

namespace protobuf_to_5fFight_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_to_5fFight_2eproto
namespace to_Figth {
class Fight_play;
class Fight_playDefaultTypeInternal;
extern Fight_playDefaultTypeInternal _Fight_play_default_instance_;
class Figth_init;
class Figth_initDefaultTypeInternal;
extern Figth_initDefaultTypeInternal _Figth_init_default_instance_;
class play;
class playDefaultTypeInternal;
extern playDefaultTypeInternal _play_default_instance_;
class rq_Fight_init;
class rq_Fight_initDefaultTypeInternal;
extern rq_Fight_initDefaultTypeInternal _rq_Fight_init_default_instance_;
class rq_Fight_init_user;
class rq_Fight_init_userDefaultTypeInternal;
extern rq_Fight_init_userDefaultTypeInternal _rq_Fight_init_user_default_instance_;
}  // namespace to_Figth
namespace google {
namespace protobuf {
template<> ::to_Figth::Fight_play* Arena::CreateMaybeMessage<::to_Figth::Fight_play>(Arena*);
template<> ::to_Figth::Figth_init* Arena::CreateMaybeMessage<::to_Figth::Figth_init>(Arena*);
template<> ::to_Figth::play* Arena::CreateMaybeMessage<::to_Figth::play>(Arena*);
template<> ::to_Figth::rq_Fight_init* Arena::CreateMaybeMessage<::to_Figth::rq_Fight_init>(Arena*);
template<> ::to_Figth::rq_Fight_init_user* Arena::CreateMaybeMessage<::to_Figth::rq_Fight_init_user>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace to_Figth {

// ===================================================================

class play : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:to_Figth.play) */ {
 public:
  play();
  virtual ~play();

  play(const play& from);

  inline play& operator=(const play& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  play(play&& from) noexcept
    : play() {
    *this = ::std::move(from);
  }

  inline play& operator=(play&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const play& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const play* internal_default_instance() {
    return reinterpret_cast<const play*>(
               &_play_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(play* other);
  friend void swap(play& a, play& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline play* New() const final {
    return CreateMaybeMessage<play>(NULL);
  }

  play* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<play>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const play& from);
  void MergeFrom(const play& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(play* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleName = 1;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // int32 ranks = 2;
  void clear_ranks();
  static const int kRanksFieldNumber = 2;
  ::google::protobuf::int32 ranks() const;
  void set_ranks(::google::protobuf::int32 value);

  // int32 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 heroid = 4;
  void clear_heroid();
  static const int kHeroidFieldNumber = 4;
  ::google::protobuf::int32 heroid() const;
  void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:to_Figth.play)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::int32 ranks_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 heroid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_to_5fFight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Figth_init : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:to_Figth.Figth_init) */ {
 public:
  Figth_init();
  virtual ~Figth_init();

  Figth_init(const Figth_init& from);

  inline Figth_init& operator=(const Figth_init& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Figth_init(Figth_init&& from) noexcept
    : Figth_init() {
    *this = ::std::move(from);
  }

  inline Figth_init& operator=(Figth_init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Figth_init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Figth_init* internal_default_instance() {
    return reinterpret_cast<const Figth_init*>(
               &_Figth_init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Figth_init* other);
  friend void swap(Figth_init& a, Figth_init& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Figth_init* New() const final {
    return CreateMaybeMessage<Figth_init>(NULL);
  }

  Figth_init* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Figth_init>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Figth_init& from);
  void MergeFrom(const Figth_init& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Figth_init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .to_Figth.play plays = 2;
  int plays_size() const;
  void clear_plays();
  static const int kPlaysFieldNumber = 2;
  ::to_Figth::play* mutable_plays(int index);
  ::google::protobuf::RepeatedPtrField< ::to_Figth::play >*
      mutable_plays();
  const ::to_Figth::play& plays(int index) const;
  ::to_Figth::play* add_plays();
  const ::google::protobuf::RepeatedPtrField< ::to_Figth::play >&
      plays() const;

  // int32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:to_Figth.Figth_init)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::to_Figth::play > plays_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_to_5fFight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fight_play : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:to_Figth.Fight_play) */ {
 public:
  Fight_play();
  virtual ~Fight_play();

  Fight_play(const Fight_play& from);

  inline Fight_play& operator=(const Fight_play& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fight_play(Fight_play&& from) noexcept
    : Fight_play() {
    *this = ::std::move(from);
  }

  inline Fight_play& operator=(Fight_play&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fight_play& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fight_play* internal_default_instance() {
    return reinterpret_cast<const Fight_play*>(
               &_Fight_play_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Fight_play* other);
  friend void swap(Fight_play& a, Fight_play& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fight_play* New() const final {
    return CreateMaybeMessage<Fight_play>(NULL);
  }

  Fight_play* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fight_play>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fight_play& from);
  void MergeFrom(const Fight_play& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight_play* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 play_id = 2;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 2;
  ::google::protobuf::int32 play_id() const;
  void set_play_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:to_Figth.Fight_play)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 play_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_to_5fFight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rq_Fight_init : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:to_Figth.rq_Fight_init) */ {
 public:
  rq_Fight_init();
  virtual ~rq_Fight_init();

  rq_Fight_init(const rq_Fight_init& from);

  inline rq_Fight_init& operator=(const rq_Fight_init& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rq_Fight_init(rq_Fight_init&& from) noexcept
    : rq_Fight_init() {
    *this = ::std::move(from);
  }

  inline rq_Fight_init& operator=(rq_Fight_init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rq_Fight_init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rq_Fight_init* internal_default_instance() {
    return reinterpret_cast<const rq_Fight_init*>(
               &_rq_Fight_init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(rq_Fight_init* other);
  friend void swap(rq_Fight_init& a, rq_Fight_init& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rq_Fight_init* New() const final {
    return CreateMaybeMessage<rq_Fight_init>(NULL);
  }

  rq_Fight_init* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rq_Fight_init>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rq_Fight_init& from);
  void MergeFrom(const rq_Fight_init& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rq_Fight_init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .to_Figth.Fight_play Fight_plays = 2;
  int fight_plays_size() const;
  void clear_fight_plays();
  static const int kFightPlaysFieldNumber = 2;
  ::to_Figth::Fight_play* mutable_fight_plays(int index);
  ::google::protobuf::RepeatedPtrField< ::to_Figth::Fight_play >*
      mutable_fight_plays();
  const ::to_Figth::Fight_play& fight_plays(int index) const;
  ::to_Figth::Fight_play* add_fight_plays();
  const ::google::protobuf::RepeatedPtrField< ::to_Figth::Fight_play >&
      fight_plays() const;

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 Fight_id = 1;
  void clear_fight_id();
  static const int kFightIdFieldNumber = 1;
  ::google::protobuf::int32 fight_id() const;
  void set_fight_id(::google::protobuf::int32 value);

  // int32 roomid = 3;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:to_Figth.rq_Fight_init)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::to_Figth::Fight_play > fight_plays_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 fight_id_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_to_5fFight_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rq_Fight_init_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:to_Figth.rq_Fight_init_user) */ {
 public:
  rq_Fight_init_user();
  virtual ~rq_Fight_init_user();

  rq_Fight_init_user(const rq_Fight_init_user& from);

  inline rq_Fight_init_user& operator=(const rq_Fight_init_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rq_Fight_init_user(rq_Fight_init_user&& from) noexcept
    : rq_Fight_init_user() {
    *this = ::std::move(from);
  }

  inline rq_Fight_init_user& operator=(rq_Fight_init_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rq_Fight_init_user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rq_Fight_init_user* internal_default_instance() {
    return reinterpret_cast<const rq_Fight_init_user*>(
               &_rq_Fight_init_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(rq_Fight_init_user* other);
  friend void swap(rq_Fight_init_user& a, rq_Fight_init_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rq_Fight_init_user* New() const final {
    return CreateMaybeMessage<rq_Fight_init_user>(NULL);
  }

  rq_Fight_init_user* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rq_Fight_init_user>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rq_Fight_init_user& from);
  void MergeFrom(const rq_Fight_init_user& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rq_Fight_init_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 Fight_id = 1;
  void clear_fight_id();
  static const int kFightIdFieldNumber = 1;
  ::google::protobuf::int32 fight_id() const;
  void set_fight_id(::google::protobuf::int32 value);

  // int32 play_id = 2;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 2;
  ::google::protobuf::int32 play_id() const;
  void set_play_id(::google::protobuf::int32 value);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:to_Figth.rq_Fight_init_user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 fight_id_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_to_5fFight_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// play

// string roleName = 1;
inline void play::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& play::rolename() const {
  // @@protoc_insertion_point(field_get:to_Figth.play.roleName)
  return rolename_.GetNoArena();
}
inline void play::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to_Figth.play.roleName)
}
#if LANG_CXX11
inline void play::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:to_Figth.play.roleName)
}
#endif
inline void play::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to_Figth.play.roleName)
}
inline void play::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to_Figth.play.roleName)
}
inline ::std::string* play::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:to_Figth.play.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* play::release_rolename() {
  // @@protoc_insertion_point(field_release:to_Figth.play.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void play::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:to_Figth.play.roleName)
}

// int32 ranks = 2;
inline void play::clear_ranks() {
  ranks_ = 0;
}
inline ::google::protobuf::int32 play::ranks() const {
  // @@protoc_insertion_point(field_get:to_Figth.play.ranks)
  return ranks_;
}
inline void play::set_ranks(::google::protobuf::int32 value) {
  
  ranks_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.play.ranks)
}

// int32 index = 3;
inline void play::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 play::index() const {
  // @@protoc_insertion_point(field_get:to_Figth.play.index)
  return index_;
}
inline void play::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.play.index)
}

// int32 heroid = 4;
inline void play::clear_heroid() {
  heroid_ = 0;
}
inline ::google::protobuf::int32 play::heroid() const {
  // @@protoc_insertion_point(field_get:to_Figth.play.heroid)
  return heroid_;
}
inline void play::set_heroid(::google::protobuf::int32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.play.heroid)
}

// -------------------------------------------------------------------

// Figth_init

// int32 roomid = 1;
inline void Figth_init::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 Figth_init::roomid() const {
  // @@protoc_insertion_point(field_get:to_Figth.Figth_init.roomid)
  return roomid_;
}
inline void Figth_init::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.Figth_init.roomid)
}

// repeated .to_Figth.play plays = 2;
inline int Figth_init::plays_size() const {
  return plays_.size();
}
inline void Figth_init::clear_plays() {
  plays_.Clear();
}
inline ::to_Figth::play* Figth_init::mutable_plays(int index) {
  // @@protoc_insertion_point(field_mutable:to_Figth.Figth_init.plays)
  return plays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::to_Figth::play >*
Figth_init::mutable_plays() {
  // @@protoc_insertion_point(field_mutable_list:to_Figth.Figth_init.plays)
  return &plays_;
}
inline const ::to_Figth::play& Figth_init::plays(int index) const {
  // @@protoc_insertion_point(field_get:to_Figth.Figth_init.plays)
  return plays_.Get(index);
}
inline ::to_Figth::play* Figth_init::add_plays() {
  // @@protoc_insertion_point(field_add:to_Figth.Figth_init.plays)
  return plays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::to_Figth::play >&
Figth_init::plays() const {
  // @@protoc_insertion_point(field_list:to_Figth.Figth_init.plays)
  return plays_;
}

// -------------------------------------------------------------------

// Fight_play

// int32 index = 1;
inline void Fight_play::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Fight_play::index() const {
  // @@protoc_insertion_point(field_get:to_Figth.Fight_play.index)
  return index_;
}
inline void Fight_play::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.Fight_play.index)
}

// int32 play_id = 2;
inline void Fight_play::clear_play_id() {
  play_id_ = 0;
}
inline ::google::protobuf::int32 Fight_play::play_id() const {
  // @@protoc_insertion_point(field_get:to_Figth.Fight_play.play_id)
  return play_id_;
}
inline void Fight_play::set_play_id(::google::protobuf::int32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.Fight_play.play_id)
}

// -------------------------------------------------------------------

// rq_Fight_init

// int32 Fight_id = 1;
inline void rq_Fight_init::clear_fight_id() {
  fight_id_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init::fight_id() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init.Fight_id)
  return fight_id_;
}
inline void rq_Fight_init::set_fight_id(::google::protobuf::int32 value) {
  
  fight_id_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init.Fight_id)
}

// repeated .to_Figth.Fight_play Fight_plays = 2;
inline int rq_Fight_init::fight_plays_size() const {
  return fight_plays_.size();
}
inline void rq_Fight_init::clear_fight_plays() {
  fight_plays_.Clear();
}
inline ::to_Figth::Fight_play* rq_Fight_init::mutable_fight_plays(int index) {
  // @@protoc_insertion_point(field_mutable:to_Figth.rq_Fight_init.Fight_plays)
  return fight_plays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::to_Figth::Fight_play >*
rq_Fight_init::mutable_fight_plays() {
  // @@protoc_insertion_point(field_mutable_list:to_Figth.rq_Fight_init.Fight_plays)
  return &fight_plays_;
}
inline const ::to_Figth::Fight_play& rq_Fight_init::fight_plays(int index) const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init.Fight_plays)
  return fight_plays_.Get(index);
}
inline ::to_Figth::Fight_play* rq_Fight_init::add_fight_plays() {
  // @@protoc_insertion_point(field_add:to_Figth.rq_Fight_init.Fight_plays)
  return fight_plays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::to_Figth::Fight_play >&
rq_Fight_init::fight_plays() const {
  // @@protoc_insertion_point(field_list:to_Figth.rq_Fight_init.Fight_plays)
  return fight_plays_;
}

// int32 roomid = 3;
inline void rq_Fight_init::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init::roomid() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init.roomid)
  return roomid_;
}
inline void rq_Fight_init::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init.roomid)
}

// string ip = 4;
inline void rq_Fight_init::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rq_Fight_init::ip() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init.ip)
  return ip_.GetNoArena();
}
inline void rq_Fight_init::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init.ip)
}
#if LANG_CXX11
inline void rq_Fight_init::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:to_Figth.rq_Fight_init.ip)
}
#endif
inline void rq_Fight_init::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to_Figth.rq_Fight_init.ip)
}
inline void rq_Fight_init::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to_Figth.rq_Fight_init.ip)
}
inline ::std::string* rq_Fight_init::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:to_Figth.rq_Fight_init.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rq_Fight_init::release_ip() {
  // @@protoc_insertion_point(field_release:to_Figth.rq_Fight_init.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rq_Fight_init::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:to_Figth.rq_Fight_init.ip)
}

// int32 port = 5;
inline void rq_Fight_init::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init::port() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init.port)
  return port_;
}
inline void rq_Fight_init::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init.port)
}

// -------------------------------------------------------------------

// rq_Fight_init_user

// int32 play_id = 2;
inline void rq_Fight_init_user::clear_play_id() {
  play_id_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init_user::play_id() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init_user.play_id)
  return play_id_;
}
inline void rq_Fight_init_user::set_play_id(::google::protobuf::int32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init_user.play_id)
}

// string ip = 4;
inline void rq_Fight_init_user::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rq_Fight_init_user::ip() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init_user.ip)
  return ip_.GetNoArena();
}
inline void rq_Fight_init_user::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init_user.ip)
}
#if LANG_CXX11
inline void rq_Fight_init_user::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:to_Figth.rq_Fight_init_user.ip)
}
#endif
inline void rq_Fight_init_user::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:to_Figth.rq_Fight_init_user.ip)
}
inline void rq_Fight_init_user::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:to_Figth.rq_Fight_init_user.ip)
}
inline ::std::string* rq_Fight_init_user::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:to_Figth.rq_Fight_init_user.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rq_Fight_init_user::release_ip() {
  // @@protoc_insertion_point(field_release:to_Figth.rq_Fight_init_user.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rq_Fight_init_user::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:to_Figth.rq_Fight_init_user.ip)
}

// int32 port = 5;
inline void rq_Fight_init_user::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init_user::port() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init_user.port)
  return port_;
}
inline void rq_Fight_init_user::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init_user.port)
}

// int32 Fight_id = 1;
inline void rq_Fight_init_user::clear_fight_id() {
  fight_id_ = 0;
}
inline ::google::protobuf::int32 rq_Fight_init_user::fight_id() const {
  // @@protoc_insertion_point(field_get:to_Figth.rq_Fight_init_user.Fight_id)
  return fight_id_;
}
inline void rq_Fight_init_user::set_fight_id(::google::protobuf::int32 value) {
  
  fight_id_ = value;
  // @@protoc_insertion_point(field_set:to_Figth.rq_Fight_init_user.Fight_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace to_Figth

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_to_5fFight_2eproto
