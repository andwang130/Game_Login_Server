// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.porto

#ifndef PROTOBUF_INCLUDED_User_2eporto
#define PROTOBUF_INCLUDED_User_2eporto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eporto 

namespace protobuf_User_2eporto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_User_2eporto
namespace User {
class ReLogin;
class ReLoginDefaultTypeInternal;
extern ReLoginDefaultTypeInternal _ReLogin_default_instance_;
class RqLogin;
class RqLoginDefaultTypeInternal;
extern RqLoginDefaultTypeInternal _RqLogin_default_instance_;
}  // namespace User
namespace google {
namespace protobuf {
template<> ::User::ReLogin* Arena::CreateMaybeMessage<::User::ReLogin>(Arena*);
template<> ::User::RqLogin* Arena::CreateMaybeMessage<::User::RqLogin>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace User {

// ===================================================================

class ReLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.ReLogin) */ {
 public:
  ReLogin();
  virtual ~ReLogin();

  ReLogin(const ReLogin& from);

  inline ReLogin& operator=(const ReLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLogin(ReLogin&& from) noexcept
    : ReLogin() {
    *this = ::std::move(from);
  }

  inline ReLogin& operator=(ReLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLogin* internal_default_instance() {
    return reinterpret_cast<const ReLogin*>(
               &_ReLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReLogin* other);
  friend void swap(ReLogin& a, ReLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLogin* New() const final {
    return CreateMaybeMessage<ReLogin>(NULL);
  }

  ReLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReLogin& from);
  void MergeFrom(const ReLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pasw = 2;
  void clear_pasw();
  static const int kPaswFieldNumber = 2;
  const ::std::string& pasw() const;
  void set_pasw(const ::std::string& value);
  #if LANG_CXX11
  void set_pasw(::std::string&& value);
  #endif
  void set_pasw(const char* value);
  void set_pasw(const char* value, size_t size);
  ::std::string* mutable_pasw();
  ::std::string* release_pasw();
  void set_allocated_pasw(::std::string* pasw);

  // @@protoc_insertion_point(class_scope:User.ReLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pasw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eporto::TableStruct;
};
// -------------------------------------------------------------------

class RqLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.RqLogin) */ {
 public:
  RqLogin();
  virtual ~RqLogin();

  RqLogin(const RqLogin& from);

  inline RqLogin& operator=(const RqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RqLogin(RqLogin&& from) noexcept
    : RqLogin() {
    *this = ::std::move(from);
  }

  inline RqLogin& operator=(RqLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RqLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RqLogin* internal_default_instance() {
    return reinterpret_cast<const RqLogin*>(
               &_RqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RqLogin* other);
  friend void swap(RqLogin& a, RqLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RqLogin* New() const final {
    return CreateMaybeMessage<RqLogin>(NULL);
  }

  RqLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RqLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RqLogin& from);
  void MergeFrom(const RqLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RqLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.RqLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eporto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReLogin

// string name = 1;
inline void ReLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReLogin::name() const {
  // @@protoc_insertion_point(field_get:User.ReLogin.name)
  return name_.GetNoArena();
}
inline void ReLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReLogin.name)
}
#if LANG_CXX11
inline void ReLogin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReLogin.name)
}
#endif
inline void ReLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReLogin.name)
}
inline void ReLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReLogin.name)
}
inline ::std::string* ReLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:User.ReLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLogin::release_name() {
  // @@protoc_insertion_point(field_release:User.ReLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:User.ReLogin.name)
}

// string pasw = 2;
inline void ReLogin::clear_pasw() {
  pasw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReLogin::pasw() const {
  // @@protoc_insertion_point(field_get:User.ReLogin.pasw)
  return pasw_.GetNoArena();
}
inline void ReLogin::set_pasw(const ::std::string& value) {
  
  pasw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReLogin.pasw)
}
#if LANG_CXX11
inline void ReLogin::set_pasw(::std::string&& value) {
  
  pasw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReLogin.pasw)
}
#endif
inline void ReLogin::set_pasw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pasw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReLogin.pasw)
}
inline void ReLogin::set_pasw(const char* value, size_t size) {
  
  pasw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReLogin.pasw)
}
inline ::std::string* ReLogin::mutable_pasw() {
  
  // @@protoc_insertion_point(field_mutable:User.ReLogin.pasw)
  return pasw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLogin::release_pasw() {
  // @@protoc_insertion_point(field_release:User.ReLogin.pasw)
  
  return pasw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLogin::set_allocated_pasw(::std::string* pasw) {
  if (pasw != NULL) {
    
  } else {
    
  }
  pasw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pasw);
  // @@protoc_insertion_point(field_set_allocated:User.ReLogin.pasw)
}

// -------------------------------------------------------------------

// RqLogin

// int32 code = 1;
inline void RqLogin::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RqLogin::code() const {
  // @@protoc_insertion_point(field_get:User.RqLogin.code)
  return code_;
}
inline void RqLogin::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:User.RqLogin.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_User_2eporto
