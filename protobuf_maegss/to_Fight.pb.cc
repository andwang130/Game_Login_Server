// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: to_Fight.proto

#include "to_Fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_to_5fFight_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_to_5fFight_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Fight_play;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_to_5fFight_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_play;
}  // namespace protobuf_to_5fFight_2eproto
namespace to_Figth {
class playDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<play>
      _instance;
} _play_default_instance_;
class Figth_initDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Figth_init>
      _instance;
} _Figth_init_default_instance_;
class Fight_playDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fight_play>
      _instance;
} _Fight_play_default_instance_;
class rq_Fight_initDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rq_Fight_init>
      _instance;
} _rq_Fight_init_default_instance_;
class rq_Fight_init_userDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rq_Fight_init_user>
      _instance;
} _rq_Fight_init_user_default_instance_;
}  // namespace to_Figth
namespace protobuf_to_5fFight_2eproto {
static void InitDefaultsplay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::to_Figth::_play_default_instance_;
    new (ptr) ::to_Figth::play();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::to_Figth::play::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_play =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsplay}, {}};

static void InitDefaultsFigth_init() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::to_Figth::_Figth_init_default_instance_;
    new (ptr) ::to_Figth::Figth_init();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::to_Figth::Figth_init::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Figth_init =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFigth_init}, {
      &protobuf_to_5fFight_2eproto::scc_info_play.base,}};

static void InitDefaultsFight_play() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::to_Figth::_Fight_play_default_instance_;
    new (ptr) ::to_Figth::Fight_play();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::to_Figth::Fight_play::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fight_play =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFight_play}, {}};

static void InitDefaultsrq_Fight_init() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::to_Figth::_rq_Fight_init_default_instance_;
    new (ptr) ::to_Figth::rq_Fight_init();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::to_Figth::rq_Fight_init::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rq_Fight_init =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrq_Fight_init}, {
      &protobuf_to_5fFight_2eproto::scc_info_Fight_play.base,}};

static void InitDefaultsrq_Fight_init_user() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::to_Figth::_rq_Fight_init_user_default_instance_;
    new (ptr) ::to_Figth::rq_Fight_init_user();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::to_Figth::rq_Fight_init_user::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rq_Fight_init_user =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrq_Fight_init_user}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_play.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Figth_init.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fight_play.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rq_Fight_init.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rq_Fight_init_user.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::play, rolename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::play, ranks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::play, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::play, heroid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Figth_init, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Figth_init, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Figth_init, plays_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Fight_play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Fight_play, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::Fight_play, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, fight_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, fight_plays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init_user, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init_user, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init_user, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init_user, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::to_Figth::rq_Fight_init_user, fight_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::to_Figth::play)},
  { 9, -1, sizeof(::to_Figth::Figth_init)},
  { 16, -1, sizeof(::to_Figth::Fight_play)},
  { 23, -1, sizeof(::to_Figth::rq_Fight_init)},
  { 33, -1, sizeof(::to_Figth::rq_Fight_init_user)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::to_Figth::_play_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::to_Figth::_Figth_init_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::to_Figth::_Fight_play_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::to_Figth::_rq_Fight_init_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::to_Figth::_rq_Fight_init_user_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "to_Fight.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016to_Fight.proto\022\010to_Figth\"F\n\004play\022\020\n\010ro"
      "leName\030\001 \001(\t\022\r\n\005ranks\030\002 \001(\005\022\r\n\005index\030\003 \001"
      "(\005\022\016\n\006heroid\030\004 \001(\005\";\n\nFigth_init\022\016\n\006room"
      "id\030\001 \001(\005\022\035\n\005plays\030\002 \003(\0132\016.to_Figth.play\""
      ",\n\nFight_play\022\r\n\005index\030\001 \001(\005\022\017\n\007play_id\030"
      "\002 \001(\005\"v\n\rrq_Fight_init\022\020\n\010Fight_id\030\001 \001(\005"
      "\022)\n\013Fight_plays\030\002 \003(\0132\024.to_Figth.Fight_p"
      "lay\022\016\n\006roomid\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030"
      "\005 \001(\005\"Q\n\022rq_Fight_init_user\022\017\n\007play_id\030\002"
      " \001(\005\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030\005 \001(\005\022\020\n\010Fight_"
      "id\030\001 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "to_Fight.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_to_5fFight_2eproto
namespace to_Figth {

// ===================================================================

void play::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play::kRoleNameFieldNumber;
const int play::kRanksFieldNumber;
const int play::kIndexFieldNumber;
const int play::kHeroidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play::play()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_to_5fFight_2eproto::scc_info_play.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:to_Figth.play)
}
play::play(const play& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rolename().size() > 0) {
    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  ::memcpy(&ranks_, &from.ranks_,
    static_cast<size_t>(reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&ranks_)) + sizeof(heroid_));
  // @@protoc_insertion_point(copy_constructor:to_Figth.play)
}

void play::SharedCtor() {
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ranks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) -
      reinterpret_cast<char*>(&ranks_)) + sizeof(heroid_));
}

play::~play() {
  // @@protoc_insertion_point(destructor:to_Figth.play)
  SharedDtor();
}

void play::SharedDtor() {
  rolename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* play::descriptor() {
  ::protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const play& play::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_to_5fFight_2eproto::scc_info_play.base);
  return *internal_default_instance();
}


void play::Clear() {
// @@protoc_insertion_point(message_clear_start:to_Figth.play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ranks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) -
      reinterpret_cast<char*>(&ranks_)) + sizeof(heroid_));
  _internal_metadata_.Clear();
}

bool play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to_Figth.play)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string roleName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rolename().data(), static_cast<int>(this->rolename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to_Figth.play.roleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ranks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 heroid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to_Figth.play)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to_Figth.play)
  return false;
#undef DO_
}

void play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to_Figth.play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roleName = 1;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), static_cast<int>(this->rolename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.play.roleName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rolename(), output);
  }

  // int32 ranks = 2;
  if (this->ranks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranks(), output);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // int32 heroid = 4;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->heroid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:to_Figth.play)
}

::google::protobuf::uint8* play::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:to_Figth.play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roleName = 1;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), static_cast<int>(this->rolename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.play.roleName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // int32 ranks = 2;
  if (this->ranks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranks(), target);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // int32 heroid = 4;
  if (this->heroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->heroid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:to_Figth.play)
  return target;
}

size_t play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:to_Figth.play)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string roleName = 1;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rolename());
  }

  // int32 ranks = 2;
  if (this->ranks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranks());
  }

  // int32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 heroid = 4;
  if (this->heroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->heroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void play::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:to_Figth.play)
  GOOGLE_DCHECK_NE(&from, this);
  const play* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const play>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:to_Figth.play)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:to_Figth.play)
    MergeFrom(*source);
  }
}

void play::MergeFrom(const play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to_Figth.play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rolename().size() > 0) {

    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  if (from.ranks() != 0) {
    set_ranks(from.ranks());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
}

void play::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:to_Figth.play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void play::CopyFrom(const play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to_Figth.play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool play::IsInitialized() const {
  return true;
}

void play::Swap(play* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play::InternalSwap(play* other) {
  using std::swap;
  rolename_.Swap(&other->rolename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ranks_, other->ranks_);
  swap(index_, other->index_);
  swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata play::GetMetadata() const {
  protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Figth_init::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Figth_init::kRoomidFieldNumber;
const int Figth_init::kPlaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Figth_init::Figth_init()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_to_5fFight_2eproto::scc_info_Figth_init.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:to_Figth.Figth_init)
}
Figth_init::Figth_init(const Figth_init& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plays_(from.plays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:to_Figth.Figth_init)
}

void Figth_init::SharedCtor() {
  roomid_ = 0;
}

Figth_init::~Figth_init() {
  // @@protoc_insertion_point(destructor:to_Figth.Figth_init)
  SharedDtor();
}

void Figth_init::SharedDtor() {
}

void Figth_init::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Figth_init::descriptor() {
  ::protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Figth_init& Figth_init::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_to_5fFight_2eproto::scc_info_Figth_init.base);
  return *internal_default_instance();
}


void Figth_init::Clear() {
// @@protoc_insertion_point(message_clear_start:to_Figth.Figth_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plays_.Clear();
  roomid_ = 0;
  _internal_metadata_.Clear();
}

bool Figth_init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to_Figth.Figth_init)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .to_Figth.play plays = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to_Figth.Figth_init)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to_Figth.Figth_init)
  return false;
#undef DO_
}

void Figth_init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to_Figth.Figth_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated .to_Figth.play plays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->plays(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:to_Figth.Figth_init)
}

::google::protobuf::uint8* Figth_init::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:to_Figth.Figth_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated .to_Figth.play plays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plays_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->plays(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:to_Figth.Figth_init)
  return target;
}

size_t Figth_init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:to_Figth.Figth_init)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .to_Figth.play plays = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->plays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plays(static_cast<int>(i)));
    }
  }

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Figth_init::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:to_Figth.Figth_init)
  GOOGLE_DCHECK_NE(&from, this);
  const Figth_init* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Figth_init>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:to_Figth.Figth_init)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:to_Figth.Figth_init)
    MergeFrom(*source);
  }
}

void Figth_init::MergeFrom(const Figth_init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to_Figth.Figth_init)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plays_.MergeFrom(from.plays_);
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void Figth_init::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:to_Figth.Figth_init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Figth_init::CopyFrom(const Figth_init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to_Figth.Figth_init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Figth_init::IsInitialized() const {
  return true;
}

void Figth_init::Swap(Figth_init* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Figth_init::InternalSwap(Figth_init* other) {
  using std::swap;
  CastToBase(&plays_)->InternalSwap(CastToBase(&other->plays_));
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Figth_init::GetMetadata() const {
  protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Fight_play::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fight_play::kIndexFieldNumber;
const int Fight_play::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fight_play::Fight_play()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_to_5fFight_2eproto::scc_info_Fight_play.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:to_Figth.Fight_play)
}
Fight_play::Fight_play(const Fight_play& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:to_Figth.Fight_play)
}

void Fight_play::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&index_)) + sizeof(play_id_));
}

Fight_play::~Fight_play() {
  // @@protoc_insertion_point(destructor:to_Figth.Fight_play)
  SharedDtor();
}

void Fight_play::SharedDtor() {
}

void Fight_play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Fight_play::descriptor() {
  ::protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fight_play& Fight_play::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_to_5fFight_2eproto::scc_info_Fight_play.base);
  return *internal_default_instance();
}


void Fight_play::Clear() {
// @@protoc_insertion_point(message_clear_start:to_Figth.Fight_play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&index_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool Fight_play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to_Figth.Fight_play)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 play_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to_Figth.Fight_play)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to_Figth.Fight_play)
  return false;
#undef DO_
}

void Fight_play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to_Figth.Fight_play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:to_Figth.Fight_play)
}

::google::protobuf::uint8* Fight_play::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:to_Figth.Fight_play)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:to_Figth.Fight_play)
  return target;
}

size_t Fight_play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:to_Figth.Fight_play)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fight_play::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:to_Figth.Fight_play)
  GOOGLE_DCHECK_NE(&from, this);
  const Fight_play* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fight_play>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:to_Figth.Fight_play)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:to_Figth.Fight_play)
    MergeFrom(*source);
  }
}

void Fight_play::MergeFrom(const Fight_play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to_Figth.Fight_play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void Fight_play::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:to_Figth.Fight_play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fight_play::CopyFrom(const Fight_play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to_Figth.Fight_play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight_play::IsInitialized() const {
  return true;
}

void Fight_play::Swap(Fight_play* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fight_play::InternalSwap(Fight_play* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Fight_play::GetMetadata() const {
  protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rq_Fight_init::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rq_Fight_init::kFightIdFieldNumber;
const int rq_Fight_init::kFightPlaysFieldNumber;
const int rq_Fight_init::kRoomidFieldNumber;
const int rq_Fight_init::kIpFieldNumber;
const int rq_Fight_init::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rq_Fight_init::rq_Fight_init()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_to_5fFight_2eproto::scc_info_rq_Fight_init.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:to_Figth.rq_Fight_init)
}
rq_Fight_init::rq_Fight_init(const rq_Fight_init& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fight_plays_(from.fight_plays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&fight_id_, &from.fight_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:to_Figth.rq_Fight_init)
}

void rq_Fight_init::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fight_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
}

rq_Fight_init::~rq_Fight_init() {
  // @@protoc_insertion_point(destructor:to_Figth.rq_Fight_init)
  SharedDtor();
}

void rq_Fight_init::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rq_Fight_init::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rq_Fight_init::descriptor() {
  ::protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rq_Fight_init& rq_Fight_init::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_to_5fFight_2eproto::scc_info_rq_Fight_init.base);
  return *internal_default_instance();
}


void rq_Fight_init::Clear() {
// @@protoc_insertion_point(message_clear_start:to_Figth.rq_Fight_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fight_plays_.Clear();
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fight_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool rq_Fight_init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to_Figth.rq_Fight_init)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Fight_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .to_Figth.Fight_play Fight_plays = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fight_plays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to_Figth.rq_Fight_init.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to_Figth.rq_Fight_init)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to_Figth.rq_Fight_init)
  return false;
#undef DO_
}

void rq_Fight_init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to_Figth.rq_Fight_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fight_id(), output);
  }

  // repeated .to_Figth.Fight_play Fight_plays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_plays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->fight_plays(static_cast<int>(i)),
      output);
  }

  // int32 roomid = 3;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.rq_Fight_init.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:to_Figth.rq_Fight_init)
}

::google::protobuf::uint8* rq_Fight_init::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:to_Figth.rq_Fight_init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fight_id(), target);
  }

  // repeated .to_Figth.Fight_play Fight_plays = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_plays_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fight_plays(static_cast<int>(i)), deterministic, target);
  }

  // int32 roomid = 3;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.rq_Fight_init.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:to_Figth.rq_Fight_init)
  return target;
}

size_t rq_Fight_init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:to_Figth.rq_Fight_init)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .to_Figth.Fight_play Fight_plays = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fight_plays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fight_plays(static_cast<int>(i)));
    }
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_id());
  }

  // int32 roomid = 3;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rq_Fight_init::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:to_Figth.rq_Fight_init)
  GOOGLE_DCHECK_NE(&from, this);
  const rq_Fight_init* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rq_Fight_init>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:to_Figth.rq_Fight_init)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:to_Figth.rq_Fight_init)
    MergeFrom(*source);
  }
}

void rq_Fight_init::MergeFrom(const rq_Fight_init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to_Figth.rq_Fight_init)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fight_plays_.MergeFrom(from.fight_plays_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.fight_id() != 0) {
    set_fight_id(from.fight_id());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void rq_Fight_init::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:to_Figth.rq_Fight_init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rq_Fight_init::CopyFrom(const rq_Fight_init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to_Figth.rq_Fight_init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rq_Fight_init::IsInitialized() const {
  return true;
}

void rq_Fight_init::Swap(rq_Fight_init* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rq_Fight_init::InternalSwap(rq_Fight_init* other) {
  using std::swap;
  CastToBase(&fight_plays_)->InternalSwap(CastToBase(&other->fight_plays_));
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fight_id_, other->fight_id_);
  swap(roomid_, other->roomid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rq_Fight_init::GetMetadata() const {
  protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rq_Fight_init_user::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rq_Fight_init_user::kPlayIdFieldNumber;
const int rq_Fight_init_user::kIpFieldNumber;
const int rq_Fight_init_user::kPortFieldNumber;
const int rq_Fight_init_user::kFightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rq_Fight_init_user::rq_Fight_init_user()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_to_5fFight_2eproto::scc_info_rq_Fight_init_user.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:to_Figth.rq_Fight_init_user)
}
rq_Fight_init_user::rq_Fight_init_user(const rq_Fight_init_user& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&fight_id_, &from.fight_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:to_Figth.rq_Fight_init_user)
}

void rq_Fight_init_user::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fight_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
}

rq_Fight_init_user::~rq_Fight_init_user() {
  // @@protoc_insertion_point(destructor:to_Figth.rq_Fight_init_user)
  SharedDtor();
}

void rq_Fight_init_user::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rq_Fight_init_user::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rq_Fight_init_user::descriptor() {
  ::protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rq_Fight_init_user& rq_Fight_init_user::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_to_5fFight_2eproto::scc_info_rq_Fight_init_user.base);
  return *internal_default_instance();
}


void rq_Fight_init_user::Clear() {
// @@protoc_insertion_point(message_clear_start:to_Figth.rq_Fight_init_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fight_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&fight_id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool rq_Fight_init_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:to_Figth.rq_Fight_init_user)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Fight_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 play_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "to_Figth.rq_Fight_init_user.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:to_Figth.rq_Fight_init_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:to_Figth.rq_Fight_init_user)
  return false;
#undef DO_
}

void rq_Fight_init_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:to_Figth.rq_Fight_init_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fight_id(), output);
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->play_id(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.rq_Fight_init_user.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:to_Figth.rq_Fight_init_user)
}

::google::protobuf::uint8* rq_Fight_init_user::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:to_Figth.rq_Fight_init_user)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fight_id(), target);
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->play_id(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "to_Figth.rq_Fight_init_user.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:to_Figth.rq_Fight_init_user)
  return target;
}

size_t rq_Fight_init_user::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:to_Figth.rq_Fight_init_user)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 Fight_id = 1;
  if (this->fight_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_id());
  }

  // int32 play_id = 2;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->play_id());
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rq_Fight_init_user::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:to_Figth.rq_Fight_init_user)
  GOOGLE_DCHECK_NE(&from, this);
  const rq_Fight_init_user* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rq_Fight_init_user>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:to_Figth.rq_Fight_init_user)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:to_Figth.rq_Fight_init_user)
    MergeFrom(*source);
  }
}

void rq_Fight_init_user::MergeFrom(const rq_Fight_init_user& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:to_Figth.rq_Fight_init_user)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.fight_id() != 0) {
    set_fight_id(from.fight_id());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void rq_Fight_init_user::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:to_Figth.rq_Fight_init_user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rq_Fight_init_user::CopyFrom(const rq_Fight_init_user& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:to_Figth.rq_Fight_init_user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rq_Fight_init_user::IsInitialized() const {
  return true;
}

void rq_Fight_init_user::Swap(rq_Fight_init_user* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rq_Fight_init_user::InternalSwap(rq_Fight_init_user* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fight_id_, other->fight_id_);
  swap(play_id_, other->play_id_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rq_Fight_init_user::GetMetadata() const {
  protobuf_to_5fFight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_to_5fFight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace to_Figth
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::to_Figth::play* Arena::CreateMaybeMessage< ::to_Figth::play >(Arena* arena) {
  return Arena::CreateInternal< ::to_Figth::play >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::to_Figth::Figth_init* Arena::CreateMaybeMessage< ::to_Figth::Figth_init >(Arena* arena) {
  return Arena::CreateInternal< ::to_Figth::Figth_init >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::to_Figth::Fight_play* Arena::CreateMaybeMessage< ::to_Figth::Fight_play >(Arena* arena) {
  return Arena::CreateInternal< ::to_Figth::Fight_play >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::to_Figth::rq_Fight_init* Arena::CreateMaybeMessage< ::to_Figth::rq_Fight_init >(Arena* arena) {
  return Arena::CreateInternal< ::to_Figth::rq_Fight_init >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::to_Figth::rq_Fight_init_user* Arena::CreateMaybeMessage< ::to_Figth::rq_Fight_init_user >(Arena* arena) {
  return Arena::CreateInternal< ::to_Figth::rq_Fight_init_user >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
