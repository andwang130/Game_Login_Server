// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_INCLUDED_User_2eproto
#define PROTOBUF_INCLUDED_User_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_User_2eproto 

namespace protobuf_User_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_User_2eproto
namespace User {
class ReLogin;
class ReLoginDefaultTypeInternal;
extern ReLoginDefaultTypeInternal _ReLogin_default_instance_;
class ReRegister;
class ReRegisterDefaultTypeInternal;
extern ReRegisterDefaultTypeInternal _ReRegister_default_instance_;
class RqLogin;
class RqLoginDefaultTypeInternal;
extern RqLoginDefaultTypeInternal _RqLogin_default_instance_;
class RqRegister;
class RqRegisterDefaultTypeInternal;
extern RqRegisterDefaultTypeInternal _RqRegister_default_instance_;
class Rqrole;
class RqroleDefaultTypeInternal;
extern RqroleDefaultTypeInternal _Rqrole_default_instance_;
class addrole;
class addroleDefaultTypeInternal;
extern addroleDefaultTypeInternal _addrole_default_instance_;
class cilck_hero;
class cilck_heroDefaultTypeInternal;
extern cilck_heroDefaultTypeInternal _cilck_hero_default_instance_;
class matching;
class matchingDefaultTypeInternal;
extern matchingDefaultTypeInternal _matching_default_instance_;
class role_hore;
class role_horeDefaultTypeInternal;
extern role_horeDefaultTypeInternal _role_hore_default_instance_;
class room_id;
class room_idDefaultTypeInternal;
extern room_idDefaultTypeInternal _room_id_default_instance_;
class roominfo;
class roominfoDefaultTypeInternal;
extern roominfoDefaultTypeInternal _roominfo_default_instance_;
class rqcode;
class rqcodeDefaultTypeInternal;
extern rqcodeDefaultTypeInternal _rqcode_default_instance_;
class to_room;
class to_roomDefaultTypeInternal;
extern to_roomDefaultTypeInternal _to_room_default_instance_;
}  // namespace User
namespace google {
namespace protobuf {
template<> ::User::ReLogin* Arena::CreateMaybeMessage<::User::ReLogin>(Arena*);
template<> ::User::ReRegister* Arena::CreateMaybeMessage<::User::ReRegister>(Arena*);
template<> ::User::RqLogin* Arena::CreateMaybeMessage<::User::RqLogin>(Arena*);
template<> ::User::RqRegister* Arena::CreateMaybeMessage<::User::RqRegister>(Arena*);
template<> ::User::Rqrole* Arena::CreateMaybeMessage<::User::Rqrole>(Arena*);
template<> ::User::addrole* Arena::CreateMaybeMessage<::User::addrole>(Arena*);
template<> ::User::cilck_hero* Arena::CreateMaybeMessage<::User::cilck_hero>(Arena*);
template<> ::User::matching* Arena::CreateMaybeMessage<::User::matching>(Arena*);
template<> ::User::role_hore* Arena::CreateMaybeMessage<::User::role_hore>(Arena*);
template<> ::User::room_id* Arena::CreateMaybeMessage<::User::room_id>(Arena*);
template<> ::User::roominfo* Arena::CreateMaybeMessage<::User::roominfo>(Arena*);
template<> ::User::rqcode* Arena::CreateMaybeMessage<::User::rqcode>(Arena*);
template<> ::User::to_room* Arena::CreateMaybeMessage<::User::to_room>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace User {

// ===================================================================

class ReLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.ReLogin) */ {
 public:
  ReLogin();
  virtual ~ReLogin();

  ReLogin(const ReLogin& from);

  inline ReLogin& operator=(const ReLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLogin(ReLogin&& from) noexcept
    : ReLogin() {
    *this = ::std::move(from);
  }

  inline ReLogin& operator=(ReLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLogin* internal_default_instance() {
    return reinterpret_cast<const ReLogin*>(
               &_ReLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReLogin* other);
  friend void swap(ReLogin& a, ReLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLogin* New() const final {
    return CreateMaybeMessage<ReLogin>(NULL);
  }

  ReLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReLogin& from);
  void MergeFrom(const ReLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pswd = 2;
  void clear_pswd();
  static const int kPswdFieldNumber = 2;
  const ::std::string& pswd() const;
  void set_pswd(const ::std::string& value);
  #if LANG_CXX11
  void set_pswd(::std::string&& value);
  #endif
  void set_pswd(const char* value);
  void set_pswd(const char* value, size_t size);
  ::std::string* mutable_pswd();
  ::std::string* release_pswd();
  void set_allocated_pswd(::std::string* pswd);

  // @@protoc_insertion_point(class_scope:User.ReLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pswd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RqLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.RqLogin) */ {
 public:
  RqLogin();
  virtual ~RqLogin();

  RqLogin(const RqLogin& from);

  inline RqLogin& operator=(const RqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RqLogin(RqLogin&& from) noexcept
    : RqLogin() {
    *this = ::std::move(from);
  }

  inline RqLogin& operator=(RqLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RqLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RqLogin* internal_default_instance() {
    return reinterpret_cast<const RqLogin*>(
               &_RqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RqLogin* other);
  friend void swap(RqLogin& a, RqLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RqLogin* New() const final {
    return CreateMaybeMessage<RqLogin>(NULL);
  }

  RqLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RqLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RqLogin& from);
  void MergeFrom(const RqLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RqLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.RqLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.ReRegister) */ {
 public:
  ReRegister();
  virtual ~ReRegister();

  ReRegister(const ReRegister& from);

  inline ReRegister& operator=(const ReRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReRegister(ReRegister&& from) noexcept
    : ReRegister() {
    *this = ::std::move(from);
  }

  inline ReRegister& operator=(ReRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReRegister* internal_default_instance() {
    return reinterpret_cast<const ReRegister*>(
               &_ReRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReRegister* other);
  friend void swap(ReRegister& a, ReRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReRegister* New() const final {
    return CreateMaybeMessage<ReRegister>(NULL);
  }

  ReRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReRegister& from);
  void MergeFrom(const ReRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pswd = 2;
  void clear_pswd();
  static const int kPswdFieldNumber = 2;
  const ::std::string& pswd() const;
  void set_pswd(const ::std::string& value);
  #if LANG_CXX11
  void set_pswd(::std::string&& value);
  #endif
  void set_pswd(const char* value);
  void set_pswd(const char* value, size_t size);
  ::std::string* mutable_pswd();
  ::std::string* release_pswd();
  void set_allocated_pswd(::std::string* pswd);

  // string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string email = 4;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:User.ReRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pswd_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RqRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.RqRegister) */ {
 public:
  RqRegister();
  virtual ~RqRegister();

  RqRegister(const RqRegister& from);

  inline RqRegister& operator=(const RqRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RqRegister(RqRegister&& from) noexcept
    : RqRegister() {
    *this = ::std::move(from);
  }

  inline RqRegister& operator=(RqRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RqRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RqRegister* internal_default_instance() {
    return reinterpret_cast<const RqRegister*>(
               &_RqRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RqRegister* other);
  friend void swap(RqRegister& a, RqRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RqRegister* New() const final {
    return CreateMaybeMessage<RqRegister>(NULL);
  }

  RqRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RqRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RqRegister& from);
  void MergeFrom(const RqRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RqRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.RqRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rqrole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.Rqrole) */ {
 public:
  Rqrole();
  virtual ~Rqrole();

  Rqrole(const Rqrole& from);

  inline Rqrole& operator=(const Rqrole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rqrole(Rqrole&& from) noexcept
    : Rqrole() {
    *this = ::std::move(from);
  }

  inline Rqrole& operator=(Rqrole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rqrole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rqrole* internal_default_instance() {
    return reinterpret_cast<const Rqrole*>(
               &_Rqrole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Rqrole* other);
  friend void swap(Rqrole& a, Rqrole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rqrole* New() const final {
    return CreateMaybeMessage<Rqrole>(NULL);
  }

  Rqrole* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rqrole>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rqrole& from);
  void MergeFrom(const Rqrole& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rqrole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleName = 1;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // int32 exp = 2;
  void clear_exp();
  static const int kExpFieldNumber = 2;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // int32 money = 3;
  void clear_money();
  static const int kMoneyFieldNumber = 3;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.Rqrole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class addrole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.addrole) */ {
 public:
  addrole();
  virtual ~addrole();

  addrole(const addrole& from);

  inline addrole& operator=(const addrole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  addrole(addrole&& from) noexcept
    : addrole() {
    *this = ::std::move(from);
  }

  inline addrole& operator=(addrole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const addrole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addrole* internal_default_instance() {
    return reinterpret_cast<const addrole*>(
               &_addrole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(addrole* other);
  friend void swap(addrole& a, addrole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline addrole* New() const final {
    return CreateMaybeMessage<addrole>(NULL);
  }

  addrole* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<addrole>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const addrole& from);
  void MergeFrom(const addrole& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addrole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleName = 1;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:User.addrole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rqcode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.rqcode) */ {
 public:
  rqcode();
  virtual ~rqcode();

  rqcode(const rqcode& from);

  inline rqcode& operator=(const rqcode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rqcode(rqcode&& from) noexcept
    : rqcode() {
    *this = ::std::move(from);
  }

  inline rqcode& operator=(rqcode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rqcode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rqcode* internal_default_instance() {
    return reinterpret_cast<const rqcode*>(
               &_rqcode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(rqcode* other);
  friend void swap(rqcode& a, rqcode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rqcode* New() const final {
    return CreateMaybeMessage<rqcode>(NULL);
  }

  rqcode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rqcode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rqcode& from);
  void MergeFrom(const rqcode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rqcode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.rqcode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class room_id : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.room_id) */ {
 public:
  room_id();
  virtual ~room_id();

  room_id(const room_id& from);

  inline room_id& operator=(const room_id& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  room_id(room_id&& from) noexcept
    : room_id() {
    *this = ::std::move(from);
  }

  inline room_id& operator=(room_id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_id* internal_default_instance() {
    return reinterpret_cast<const room_id*>(
               &_room_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(room_id* other);
  friend void swap(room_id& a, room_id& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline room_id* New() const final {
    return CreateMaybeMessage<room_id>(NULL);
  }

  room_id* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<room_id>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const room_id& from);
  void MergeFrom(const room_id& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_id* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.room_id)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class matching : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.matching) */ {
 public:
  matching();
  virtual ~matching();

  matching(const matching& from);

  inline matching& operator=(const matching& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  matching(matching&& from) noexcept
    : matching() {
    *this = ::std::move(from);
  }

  inline matching& operator=(matching&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const matching& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matching* internal_default_instance() {
    return reinterpret_cast<const matching*>(
               &_matching_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(matching* other);
  friend void swap(matching& a, matching& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline matching* New() const final {
    return CreateMaybeMessage<matching>(NULL);
  }

  matching* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<matching>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const matching& from);
  void MergeFrom(const matching& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matching* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 peopleNum = 1;
  void clear_peoplenum();
  static const int kPeopleNumFieldNumber = 1;
  ::google::protobuf::int32 peoplenum() const;
  void set_peoplenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.matching)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 peoplenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class to_room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.to_room) */ {
 public:
  to_room();
  virtual ~to_room();

  to_room(const to_room& from);

  inline to_room& operator=(const to_room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  to_room(to_room&& from) noexcept
    : to_room() {
    *this = ::std::move(from);
  }

  inline to_room& operator=(to_room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const to_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const to_room* internal_default_instance() {
    return reinterpret_cast<const to_room*>(
               &_to_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(to_room* other);
  friend void swap(to_room& a, to_room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline to_room* New() const final {
    return CreateMaybeMessage<to_room>(NULL);
  }

  to_room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<to_room>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const to_room& from);
  void MergeFrom(const to_room& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(to_room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.to_room)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 room_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cilck_hero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.cilck_hero) */ {
 public:
  cilck_hero();
  virtual ~cilck_hero();

  cilck_hero(const cilck_hero& from);

  inline cilck_hero& operator=(const cilck_hero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cilck_hero(cilck_hero&& from) noexcept
    : cilck_hero() {
    *this = ::std::move(from);
  }

  inline cilck_hero& operator=(cilck_hero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cilck_hero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cilck_hero* internal_default_instance() {
    return reinterpret_cast<const cilck_hero*>(
               &_cilck_hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(cilck_hero* other);
  friend void swap(cilck_hero& a, cilck_hero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cilck_hero* New() const final {
    return CreateMaybeMessage<cilck_hero>(NULL);
  }

  cilck_hero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cilck_hero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cilck_hero& from);
  void MergeFrom(const cilck_hero& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cilck_hero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // int32 heroid = 2;
  void clear_heroid();
  static const int kHeroidFieldNumber = 2;
  ::google::protobuf::int32 heroid() const;
  void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User.cilck_hero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 heroid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class role_hore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.role_hore) */ {
 public:
  role_hore();
  virtual ~role_hore();

  role_hore(const role_hore& from);

  inline role_hore& operator=(const role_hore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  role_hore(role_hore&& from) noexcept
    : role_hore() {
    *this = ::std::move(from);
  }

  inline role_hore& operator=(role_hore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const role_hore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const role_hore* internal_default_instance() {
    return reinterpret_cast<const role_hore*>(
               &_role_hore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(role_hore* other);
  friend void swap(role_hore& a, role_hore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline role_hore* New() const final {
    return CreateMaybeMessage<role_hore>(NULL);
  }

  role_hore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<role_hore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const role_hore& from);
  void MergeFrom(const role_hore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_hore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleName = 1;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // int32 cilckhero = 2;
  void clear_cilckhero();
  static const int kCilckheroFieldNumber = 2;
  ::google::protobuf::int32 cilckhero() const;
  void set_cilckhero(::google::protobuf::int32 value);

  // int32 ranks = 3;
  void clear_ranks();
  static const int kRanksFieldNumber = 3;
  ::google::protobuf::int32 ranks() const;
  void set_ranks(::google::protobuf::int32 value);

  // int32 index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 heroid = 5;
  void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  ::google::protobuf::int32 heroid() const;
  void set_heroid(::google::protobuf::int32 value);

  // bool toroom = 6;
  void clear_toroom();
  static const int kToroomFieldNumber = 6;
  bool toroom() const;
  void set_toroom(bool value);

  // @@protoc_insertion_point(class_scope:User.role_hore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::int32 cilckhero_;
  ::google::protobuf::int32 ranks_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 heroid_;
  bool toroom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class roominfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.roominfo) */ {
 public:
  roominfo();
  virtual ~roominfo();

  roominfo(const roominfo& from);

  inline roominfo& operator=(const roominfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  roominfo(roominfo&& from) noexcept
    : roominfo() {
    *this = ::std::move(from);
  }

  inline roominfo& operator=(roominfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const roominfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const roominfo* internal_default_instance() {
    return reinterpret_cast<const roominfo*>(
               &_roominfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(roominfo* other);
  friend void swap(roominfo& a, roominfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline roominfo* New() const final {
    return CreateMaybeMessage<roominfo>(NULL);
  }

  roominfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<roominfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const roominfo& from);
  void MergeFrom(const roominfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(roominfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .User.role_hore role_list = 1;
  int role_list_size() const;
  void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  ::User::role_hore* mutable_role_list(int index);
  ::google::protobuf::RepeatedPtrField< ::User::role_hore >*
      mutable_role_list();
  const ::User::role_hore& role_list(int index) const;
  ::User::role_hore* add_role_list();
  const ::google::protobuf::RepeatedPtrField< ::User::role_hore >&
      role_list() const;

  // @@protoc_insertion_point(class_scope:User.roominfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::User::role_hore > role_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_User_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReLogin

// string name = 1;
inline void ReLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReLogin::name() const {
  // @@protoc_insertion_point(field_get:User.ReLogin.name)
  return name_.GetNoArena();
}
inline void ReLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReLogin.name)
}
#if LANG_CXX11
inline void ReLogin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReLogin.name)
}
#endif
inline void ReLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReLogin.name)
}
inline void ReLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReLogin.name)
}
inline ::std::string* ReLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:User.ReLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLogin::release_name() {
  // @@protoc_insertion_point(field_release:User.ReLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:User.ReLogin.name)
}

// string pswd = 2;
inline void ReLogin::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReLogin::pswd() const {
  // @@protoc_insertion_point(field_get:User.ReLogin.pswd)
  return pswd_.GetNoArena();
}
inline void ReLogin::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReLogin.pswd)
}
#if LANG_CXX11
inline void ReLogin::set_pswd(::std::string&& value) {
  
  pswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReLogin.pswd)
}
#endif
inline void ReLogin::set_pswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReLogin.pswd)
}
inline void ReLogin::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReLogin.pswd)
}
inline ::std::string* ReLogin::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:User.ReLogin.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReLogin::release_pswd() {
  // @@protoc_insertion_point(field_release:User.ReLogin.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReLogin::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:User.ReLogin.pswd)
}

// -------------------------------------------------------------------

// RqLogin

// int32 code = 1;
inline void RqLogin::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RqLogin::code() const {
  // @@protoc_insertion_point(field_get:User.RqLogin.code)
  return code_;
}
inline void RqLogin::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:User.RqLogin.code)
}

// -------------------------------------------------------------------

// ReRegister

// string name = 1;
inline void ReRegister::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReRegister::name() const {
  // @@protoc_insertion_point(field_get:User.ReRegister.name)
  return name_.GetNoArena();
}
inline void ReRegister::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReRegister.name)
}
#if LANG_CXX11
inline void ReRegister::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReRegister.name)
}
#endif
inline void ReRegister::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReRegister.name)
}
inline void ReRegister::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReRegister.name)
}
inline ::std::string* ReRegister::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:User.ReRegister.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReRegister::release_name() {
  // @@protoc_insertion_point(field_release:User.ReRegister.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReRegister::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:User.ReRegister.name)
}

// string pswd = 2;
inline void ReRegister::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReRegister::pswd() const {
  // @@protoc_insertion_point(field_get:User.ReRegister.pswd)
  return pswd_.GetNoArena();
}
inline void ReRegister::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReRegister.pswd)
}
#if LANG_CXX11
inline void ReRegister::set_pswd(::std::string&& value) {
  
  pswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReRegister.pswd)
}
#endif
inline void ReRegister::set_pswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReRegister.pswd)
}
inline void ReRegister::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReRegister.pswd)
}
inline ::std::string* ReRegister::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:User.ReRegister.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReRegister::release_pswd() {
  // @@protoc_insertion_point(field_release:User.ReRegister.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReRegister::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:User.ReRegister.pswd)
}

// string phone = 3;
inline void ReRegister::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReRegister::phone() const {
  // @@protoc_insertion_point(field_get:User.ReRegister.phone)
  return phone_.GetNoArena();
}
inline void ReRegister::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReRegister.phone)
}
#if LANG_CXX11
inline void ReRegister::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReRegister.phone)
}
#endif
inline void ReRegister::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReRegister.phone)
}
inline void ReRegister::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReRegister.phone)
}
inline ::std::string* ReRegister::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:User.ReRegister.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReRegister::release_phone() {
  // @@protoc_insertion_point(field_release:User.ReRegister.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReRegister::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:User.ReRegister.phone)
}

// string email = 4;
inline void ReRegister::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReRegister::email() const {
  // @@protoc_insertion_point(field_get:User.ReRegister.email)
  return email_.GetNoArena();
}
inline void ReRegister::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.ReRegister.email)
}
#if LANG_CXX11
inline void ReRegister::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.ReRegister.email)
}
#endif
inline void ReRegister::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.ReRegister.email)
}
inline void ReRegister::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.ReRegister.email)
}
inline ::std::string* ReRegister::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:User.ReRegister.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReRegister::release_email() {
  // @@protoc_insertion_point(field_release:User.ReRegister.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReRegister::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:User.ReRegister.email)
}

// -------------------------------------------------------------------

// RqRegister

// int32 code = 1;
inline void RqRegister::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RqRegister::code() const {
  // @@protoc_insertion_point(field_get:User.RqRegister.code)
  return code_;
}
inline void RqRegister::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:User.RqRegister.code)
}

// -------------------------------------------------------------------

// Rqrole

// string roleName = 1;
inline void Rqrole::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rqrole::rolename() const {
  // @@protoc_insertion_point(field_get:User.Rqrole.roleName)
  return rolename_.GetNoArena();
}
inline void Rqrole::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.Rqrole.roleName)
}
#if LANG_CXX11
inline void Rqrole::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.Rqrole.roleName)
}
#endif
inline void Rqrole::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.Rqrole.roleName)
}
inline void Rqrole::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.Rqrole.roleName)
}
inline ::std::string* Rqrole::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:User.Rqrole.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rqrole::release_rolename() {
  // @@protoc_insertion_point(field_release:User.Rqrole.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rqrole::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:User.Rqrole.roleName)
}

// int32 exp = 2;
inline void Rqrole::clear_exp() {
  exp_ = 0;
}
inline ::google::protobuf::int32 Rqrole::exp() const {
  // @@protoc_insertion_point(field_get:User.Rqrole.exp)
  return exp_;
}
inline void Rqrole::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:User.Rqrole.exp)
}

// int32 money = 3;
inline void Rqrole::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 Rqrole::money() const {
  // @@protoc_insertion_point(field_get:User.Rqrole.money)
  return money_;
}
inline void Rqrole::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:User.Rqrole.money)
}

// int32 level = 4;
inline void Rqrole::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 Rqrole::level() const {
  // @@protoc_insertion_point(field_get:User.Rqrole.level)
  return level_;
}
inline void Rqrole::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:User.Rqrole.level)
}

// -------------------------------------------------------------------

// addrole

// string roleName = 1;
inline void addrole::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& addrole::rolename() const {
  // @@protoc_insertion_point(field_get:User.addrole.roleName)
  return rolename_.GetNoArena();
}
inline void addrole::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.addrole.roleName)
}
#if LANG_CXX11
inline void addrole::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.addrole.roleName)
}
#endif
inline void addrole::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.addrole.roleName)
}
inline void addrole::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.addrole.roleName)
}
inline ::std::string* addrole::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:User.addrole.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* addrole::release_rolename() {
  // @@protoc_insertion_point(field_release:User.addrole.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void addrole::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:User.addrole.roleName)
}

// -------------------------------------------------------------------

// rqcode

// int32 code = 1;
inline void rqcode::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 rqcode::code() const {
  // @@protoc_insertion_point(field_get:User.rqcode.code)
  return code_;
}
inline void rqcode::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:User.rqcode.code)
}

// -------------------------------------------------------------------

// room_id

// int32 id = 1;
inline void room_id::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 room_id::id() const {
  // @@protoc_insertion_point(field_get:User.room_id.id)
  return id_;
}
inline void room_id::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:User.room_id.id)
}

// -------------------------------------------------------------------

// matching

// int32 peopleNum = 1;
inline void matching::clear_peoplenum() {
  peoplenum_ = 0;
}
inline ::google::protobuf::int32 matching::peoplenum() const {
  // @@protoc_insertion_point(field_get:User.matching.peopleNum)
  return peoplenum_;
}
inline void matching::set_peoplenum(::google::protobuf::int32 value) {
  
  peoplenum_ = value;
  // @@protoc_insertion_point(field_set:User.matching.peopleNum)
}

// -------------------------------------------------------------------

// to_room

// int32 room_id = 1;
inline void to_room::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 to_room::room_id() const {
  // @@protoc_insertion_point(field_get:User.to_room.room_id)
  return room_id_;
}
inline void to_room::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:User.to_room.room_id)
}

// -------------------------------------------------------------------

// cilck_hero

// int32 room_id = 1;
inline void cilck_hero::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 cilck_hero::room_id() const {
  // @@protoc_insertion_point(field_get:User.cilck_hero.room_id)
  return room_id_;
}
inline void cilck_hero::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:User.cilck_hero.room_id)
}

// int32 heroid = 2;
inline void cilck_hero::clear_heroid() {
  heroid_ = 0;
}
inline ::google::protobuf::int32 cilck_hero::heroid() const {
  // @@protoc_insertion_point(field_get:User.cilck_hero.heroid)
  return heroid_;
}
inline void cilck_hero::set_heroid(::google::protobuf::int32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:User.cilck_hero.heroid)
}

// -------------------------------------------------------------------

// role_hore

// string roleName = 1;
inline void role_hore::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& role_hore::rolename() const {
  // @@protoc_insertion_point(field_get:User.role_hore.roleName)
  return rolename_.GetNoArena();
}
inline void role_hore::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.role_hore.roleName)
}
#if LANG_CXX11
inline void role_hore::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.role_hore.roleName)
}
#endif
inline void role_hore::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.role_hore.roleName)
}
inline void role_hore::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.role_hore.roleName)
}
inline ::std::string* role_hore::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:User.role_hore.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* role_hore::release_rolename() {
  // @@protoc_insertion_point(field_release:User.role_hore.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void role_hore::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:User.role_hore.roleName)
}

// int32 cilckhero = 2;
inline void role_hore::clear_cilckhero() {
  cilckhero_ = 0;
}
inline ::google::protobuf::int32 role_hore::cilckhero() const {
  // @@protoc_insertion_point(field_get:User.role_hore.cilckhero)
  return cilckhero_;
}
inline void role_hore::set_cilckhero(::google::protobuf::int32 value) {
  
  cilckhero_ = value;
  // @@protoc_insertion_point(field_set:User.role_hore.cilckhero)
}

// int32 ranks = 3;
inline void role_hore::clear_ranks() {
  ranks_ = 0;
}
inline ::google::protobuf::int32 role_hore::ranks() const {
  // @@protoc_insertion_point(field_get:User.role_hore.ranks)
  return ranks_;
}
inline void role_hore::set_ranks(::google::protobuf::int32 value) {
  
  ranks_ = value;
  // @@protoc_insertion_point(field_set:User.role_hore.ranks)
}

// int32 index = 4;
inline void role_hore::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 role_hore::index() const {
  // @@protoc_insertion_point(field_get:User.role_hore.index)
  return index_;
}
inline void role_hore::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:User.role_hore.index)
}

// int32 heroid = 5;
inline void role_hore::clear_heroid() {
  heroid_ = 0;
}
inline ::google::protobuf::int32 role_hore::heroid() const {
  // @@protoc_insertion_point(field_get:User.role_hore.heroid)
  return heroid_;
}
inline void role_hore::set_heroid(::google::protobuf::int32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:User.role_hore.heroid)
}

// bool toroom = 6;
inline void role_hore::clear_toroom() {
  toroom_ = false;
}
inline bool role_hore::toroom() const {
  // @@protoc_insertion_point(field_get:User.role_hore.toroom)
  return toroom_;
}
inline void role_hore::set_toroom(bool value) {
  
  toroom_ = value;
  // @@protoc_insertion_point(field_set:User.role_hore.toroom)
}

// -------------------------------------------------------------------

// roominfo

// repeated .User.role_hore role_list = 1;
inline int roominfo::role_list_size() const {
  return role_list_.size();
}
inline void roominfo::clear_role_list() {
  role_list_.Clear();
}
inline ::User::role_hore* roominfo::mutable_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:User.roominfo.role_list)
  return role_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User::role_hore >*
roominfo::mutable_role_list() {
  // @@protoc_insertion_point(field_mutable_list:User.roominfo.role_list)
  return &role_list_;
}
inline const ::User::role_hore& roominfo::role_list(int index) const {
  // @@protoc_insertion_point(field_get:User.roominfo.role_list)
  return role_list_.Get(index);
}
inline ::User::role_hore* roominfo::add_role_list() {
  // @@protoc_insertion_point(field_add:User.roominfo.role_list)
  return role_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User::role_hore >&
roominfo::role_list() const {
  // @@protoc_insertion_point(field_list:User.roominfo.role_list)
  return role_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_User_2eproto
